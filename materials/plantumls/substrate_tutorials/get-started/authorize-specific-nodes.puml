@startmindmap
scale max 850 width
'!include ../../custom.conf
*[#darkcyan]:[[https://docs.substrate.io/tutorials/get-started/permissioned-network/ Authorize specific nodes]] [[#总览 返回]]
<code>

using the node authorization pallet

The node-authorization pallet is a prebuilt FRAME pallet
that enables you to manage a configurable set of nodes
for a network. Each node is identified by a PeerId.

Each PeerId is owned by one and only one AccountId
that claims the node.
</code>;
**[#mediumorchid]:Why permissioned network
<code>

In Add trusted nodes, you saw how to build a simple
network with a known set of validator nodes. That tutorial
illustrated a simplified version of a permissioned network.

In a permissioned network, only authorized nodes are allowed
to perform specific network activities. For example, you might
grant some nodes the permission to validate blocks and other
nodes the permission to propagate transactions.

A blockchain with nodes that are granted specific permissions
is different from a public or permissionless blockchain.
In a permissionless blockchain, anyone can join the network
by running the node software on suitable hardware. In general,
a permissionless blockchain offers greater decentralization of
the network. However, there are use cases where creating a
permissioned blockchain might be appropriate.

For example,a permissioned blockchain would be suitable for
the following types of projects:

1. For a private or consortium network
such as a private enterprise or a non-profit organization.
2. In highly-regulated data environments
such as healthcare, finance, or business-to-business ledgers.
3. For testing of a pre-public blockchain network at scale.
</code>;
**[#mediumorchid] Node authorization and ownership
***:There are two ways you can authorize a node to join the network:
<code>

1. By adding the PeerId to the list of predefined nodes.
You must be approved by the governance or sudo pallet
in the network to do this.

2. By asking for a paired peer connection from a specific node.
This node can either be a predefined node PeerId or a normal one.
</code>;
***:any user can claim to be the owner of a PeerId
<code>

To protect against false claims, you should claim
the node before you start the node.

After you start the node, its PeerID is visible to
the network and anyone could subsequently claim it.
</code>;
***:As the owner of a node
<code>

you can add and remove connections for your node.

For example, you can manipulate the connection
between a predefined node and your node or
between your node and other non-predefined nodes.

You can't change the connections for predefined nodes.
They are always allowed to connect with each other.
</code>;
***:offchain worker
<code>
The node-authorization pallet uses an offchain worker
to configure its node connections.

Make sure to enable the offchain worker when you
start the node because it is disabled by default
for non-authority nodes.
</code>;
*** [[https://wiki.polkadot.network/docs/faq#networking Need to be familiar with peer-to-peer networking in Substrate]]
**:编译一下项目，获取可执行文件
<code>

cd substrate-node-template
git checkout latest
cargo build --release
</code>;
** [[https://docs.substrate.io/tutorials/get-started/permissioned-network/#add-the-node-authorization-pallet Add the node authorization pallet]]
***:Cargo.toml
<code>

the Cargo.toml file controls two important pieces of information:

1. The pallets to be imported as dependencies for the runtime,
including the location and version of the pallets to import.
2. The features in each pallet that should be enabled
when compiling the native Rust binary. By enabling the standard (std)
feature set from each pallet , you can compile the runtime to include
functions, types, and primitives that would otherwise be missing
when you build the WebAssembly binary.
</code>;
**** [[https://doc.rust-lang.org/cargo/guide/dependencies.html cargo dependencies]]
**** [[https://doc.rust-lang.org/cargo/reference/features.html cargo features]]
*** Add note-authorization dependencies
****:runtime/Cargo.toml->[depencies]
<code>

[dependencies]
pallet-node-authorization = {
    default-features = false,
    git = "https://github.com/paritytech/substrate.git",
    tag = "devhub/latest",
    version = "4.0.0-dev" }
<code>;
****:runtime/Cargo.toml->[features]
<code>

[features]
default = ['std']
std = [
 ...
 "pallet-node-authorization/std",    # add this line
 ...
]

如果忘记更新 Cargo.toml 文件中的 features 部分，
可能会在编译运行时二进制文件时看到找不到函数错误。
</code>;
*****:[[https://docs.substrate.io/main-docs/build/build-process/ Build process]]
<code>

本节指定要为此运行时编译的默认功能集是 std 功能集。

使用 std 功能集编译运行时的时候，将启用所有列为依赖项的托盘中的 std 功能。

有关如何使用标准库将运行时编译为原生 Rust 二进制文件以及
使用 no_std 属性编译为 WebAssembly 二进制文件的更多详细信息，
请参阅构建运行时。
</code>;
****:check new dependencies
<code>
cargo check -p node-template-runtime
</code>;
***:Add an administrative rule
<code>

要在本教程中模拟治理(governance)，可以将托盘配置为使用 EnsureRoot 特权功能，
该功能可以使用 Sudo 托盘调用。 Sudo 托盘默认包含在节点模板中，使您能够通过根级
管理帐户进行调用。在生产环境中，将使用更现实的基于治理的检查。
</code>;
****:runtime/src/lib.rs
<code>

use frame_system::EnsureRoot；
</code>;
** Implement the Config trait for the pallet
***:About Pallet Config Trait
<code>


每个托盘都有一个名为 Config 的 Rust 特征。
Config trait 用于识别托盘所需的参数和类型。

添加托盘所需的大多数特定于托盘的代码都是使用 Config 特征实现的。
可以通过参考其 Rust 文档或托盘的源代码来查看您需要为任何托盘实现的内容。

例如，要查看 node-authorization 托盘中的 Config trait
需要实现什么，可以参考托盘节点授权::Config 的 Rust 文档。
</code>;
**** [[Traits: Defining Shared Behavior - The Rust Programming Language](https://doc.rust-lang.org/book/ch10-02-traits.html) Traits]]
**** [[https://paritytech.github.io/substrate/master/pallet_node_authorization/pallet/trait.Config.html pallet_node_authorization::pallet::Config]]
*** To implement the node-authorization pallet in your runtime
**** runtime/src/lib.rs
*****:Add the parameter_types
<code>

parameter_types! {
 pub const MaxWellKnownNodes: u32 = 8；
 pub const MaxPeerIdLength: u32 = 128；
}
</code>;
*****:Add the impl section
<code>

impl pallet_node_authorization::Config for Runtime {
 type Event = Event；
 type MaxWellKnownNodes = MaxWellKnownNodes；
 type MaxPeerIdLength = MaxPeerIdLength；
 type AddOrigin = EnsureRoot<AccountId>；
 type RemoveOrigin = EnsureRoot<AccountId>；
 type SwapOrigin = EnsureRoot<AccountId>; //
 type ResetOrigin = EnsureRoot<AccountId>; //
 type WeightInfo = (); //
}
</code>;
*****:Add the pallet to the construct_runtime macro
<code>

construct_runtime!(
pub enum Runtime where
   Block = Block,
   NodeBlock = opaque::Block,
   UncheckedExtrinsic = UncheckedExtrinsic
 {
   /* Add This Line */
   NodeAuthorization: pallet_node_authorization::{Pallet, Call, Storage, Event<T>, Config<T>},
 }
)；
</code>;
*****:Cargo check
<code>

cargo check -p node-template-runtime
</code>;
***:Add genesis storage for authorized nodes
<code>

Before you can launch the network to use node authorization,
some additional configuration is needed to handle the peer
identifiers and account identifiers .

For example, the PeerId is encoded in bs58 format,
so you need to add a new dependency for the bs58 library
in the node/Cargo.toml to decode the PeerId to get its bytes.

To keep things simple, the authorized nodes are associated
with predefined accounts.
</code>;
****:node/Cargo.toml
<code>

[dependencies]
bs58 = "0.4.0"
</code>;
**** node/src/chain_spec.rs
*****:Add genesis storage for nodes
<code>

// A struct wraps Vec<u8>, represents as our `PeerId`.
use sp_core::OpaquePeerId；
// The genesis config that serves for our pallet.
use node_template_runtime::NodeAuthorizationConfig；
</code>;
*****:Locate the testnet_genesis function
<code>

/// Configure initial storage state for FRAME modules.
fn testnet_genesis(
 wasm_binary: &[u8],
 initial_authorities: Vec<(AuraId, GrandpaId)>,
 root_key: AccountId,
 endowed_accounts: Vec<AccountId>,
 _enable_println: bool,
 ) -> GenesisConfig {
</code>;
*****:Within the GenesisConfig declaration
<code>

 node_authorization: NodeAuthorizationConfig {
   nodes: vec![
     (
       OpaquePeerId(bs58::decode("12D3KooWBmAwcd4PJNJvfV89HwE48nwkRmAgo8Vy3uQEyNNHBox2").into_vec().unwrap()),
       endowed_accounts[0].clone()
     ),
     (
       OpaquePeerId(bs58::decode("12D3KooWQYV9dGMFoRzNStwpXztXaBUjtPqi6aU76ZgUriHhKust").into_vec().unwrap()),
       endowed_accounts[1].clone()
     ),
   ],
 },

在这段代码中，NodeAuthorizationConfig 包含一个 nodes 属性，
它是一个包含两个元素的元组的向量。
1. 元组的第一个元素是 OpaquePeerId。 bs58::decode 操作将人类可读的 PeerId
（例如 12D3KooWBmAwcd4PJNJvfV89HwE48nwkRmAgo8Vy3uQEyNNHBox2）转换为字节。
2. 元组的第二个元素是代表该节点所有者的 AccountId。

此示例使用预定义的 Alice 和 Bob，此处标识为捐赠账户 [0] 和 [1]。
</code>;
**** [[https://docs.substrate.io/reference/command-line-tools/subkey/#well-known-keys 预定义的key]]
***:Verify that the node compiles
<code>

cargo build --release
</code>;
** Launch the permissioned network
***:For the purposes of this tutorial
<code>

现在可以使用预定义帐户的节点密钥和对等标识符来启动许可网络并授权其他节点加入。

出于本教程的目的，将启动四个节点:
1. 其中三个节点与预定义的帐户相关联，并且所有这三个节点都被允许创作和验证区块。
2. 第四个节点是一个子节点，只有在该节点所有者批准的情况下才被授权从选定节点读取数据。
</code>;
***:[[https://docs.substrate.io/tutorials/get-started/permissioned-network/#obtain-node-keys-and-peerids Obtain node keys and peerIDs]]
<code>

现在已经在创世存储（Genesis storage）中配置了与 Alice 和 Bob 账户关联的节点。

可以使用子密钥程序(subkey)检查与预定义帐户关联的密钥，并生成和检查您自己的密钥。

但是，如果运行 subkey generate-node-key 命令，节点密钥和对等标识符是随机生成的，
并且与教程中使用的密钥不匹配。

因为本教程使用预定义的账户和众所周知的节点密钥，所以总结了每个账户的密钥。
</code>;
***:[[https://docs.substrate.io/tutorials/get-started/permissioned-network/#start-the-first-node 使用表中数据启动alice节点]]
<code>

./target/release/node-template
--chain=local
--base-path /tmp/validator1
--alice
--node-key=c12b6d18942f5ee8528c8e2baf4e147b5c5c18710926ea492d09cbd9f6c9f82a
--port 30333
--ws-port 9944
</code>;
***:使用表中数据启动bob节点
<code>

./target/release/node-template
--chain=local
--base-path /tmp/validator2
--bob
--node-key=6ce3be907dbcabf20a9a5a60a712b4256a54196000a8ed4050d352bc113f8c58
--port 30334
--ws-port 9945
</code>;
***[#lightgreen] 两个节点都启动后，您应该能够在两个终端日志中看到创建和完成的新块。
***:Add a third node to the list of well-known nodes
<code>

您可以使用 --name charlie 命令启动第三个节点。
节点授权托盘使用脱链工作者来配置节点连接。
由于第三个节点不是知名节点，并且会将网络中的第四
个节点配置为只读子节点，
因此您必须包含命令行选项以启用脱链工作者(offchain worker)。

./target/release/node-template
--chain=local
--base-path /tmp/validator3
--name charlie
--node-key=3a9d5b35b9fb4c42aafadeca046f6bf56107bd2579687f069b42646684b94d9e
--port 30335
--ws-port=9946
--offchain-worker always
</code>;
***[#lightgreen]:charlie节点没有连接的peers
<code>

启动此节点后，您应该会看到该节点没有连接的对等方。
因为这是一个许可网络，所以必须明确授权该节点进行连接。

Alice 和 Bob 节点在 genesis chain_spec.rsfile 中配置。

必须使用对 Sudo 托盘的调用手动添加所有其他节点。
</code>;
***:[[https://docs.substrate.io/tutorials/get-started/permissioned-network/#authorize-access-for-the-third-node Authorize access for the third node]]
<code>

This tutorial uses the sudo pallet for governance.
Therefore, yu can use the sudo pallet to call the
add_well_known_node function provided by
node-authorization pallet to add the third node.
</code>;
***:[[https://docs.substrate.io/tutorials/get-started/permissioned-network/#add-a-sub-node Add a sub-node]]
<code>

该网络中的第四个节点不是众所周知的节点。
1. 该节点归用户 dave 所有，是 charlie 节点的子节点。
2. 子节点只能通过连接到 charlie 拥有的节点来访问网络。
3. 父节点负责其授权连接的任何子节点，并在子节点需要删除或审计时控制访问。

./target/release/node-template
--chain=local
--base-path /tmp/validator4
--name dave
--node-key=a99331ff4f0e0a0434a6263da0a5823ea3afcfffe590c9f3014e6cf620f2b19a
--port 30336
--ws-port 9947
--offchain-worker always
</code>;
@endmindmap